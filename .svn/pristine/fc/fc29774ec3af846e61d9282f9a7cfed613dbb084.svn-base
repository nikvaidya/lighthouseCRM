import { Component, OnInit } from '@angular/core';
import { GlobalObjectsService } from 'src/app/services/global-objects.service';
import { DataService } from 'src/app/services/data.service';
import { Router } from '@angular/router';
import { MenuController, NavController, AlertController, Events, Platform } from '@ionic/angular';
// import {GooglePlus} from '@ionic-native/google-plus/ngx';
// import { AngularFireModule } from '@angular/fire';
// import { AngularFireAuthModule, AngularFireAuth } from '@angular/fire/auth';
// import * as firebase from 'firebase/app';

declare var SMSReceive: any;

@Component({
  selector: 'app-login',
  templateUrl: './login.page.html',
  styleUrls: ['./login.page.scss'],
})
export class LoginPage implements OnInit {
  loginCredentials: any = {};
  // s_url: string;
  flagForDisableLoginButton = 0;
  public loginValid: any = {};
  online: boolean = true;
  isProcessing: boolean = false;
  public shouldHeight: any
  logoentity: any;
  upd_flag: any;
  OTPCode: any;
  userprofile: any = null;
  constructor(private navCtrl: NavController, public globalObjects: GlobalObjectsService, private events: Events,
    private alertCtrl: AlertController, public dataService: DataService, private router: Router,
    public menuCtrl: MenuController, private platform: Platform) {
    // , private afAuth: AngularFireAuth, private googlePlus:GooglePlus,
    // this.menuCtrl.enable(false);
    this.shouldHeight = document.body.clientHeight + 'px';
    // firebase.auth().onAuthStateChanged(user => {
    //   if (user) {
    //     console.log("user..>>>",user)
    //     this.userprofile = user;
    //   } else {
    //     this.userprofile = null;
    //   }
    // });
  }


  ionViewWillEnter() {
    this.menuCtrl.enable(false);
  }

  ionViewDidLeave() {
    this.menuCtrl.enable(true);
  }

  ngOnInit() {
    this.events.subscribe("logins", (res) => {
      this.doLogin();
    })
  }

  doLogin() {
    this.events.subscribe("logins", (res) => {
      this.doLogin();
    })
    this.isProcessing = true;
    // var s_url: any = this.globalObjects.getScopeUrl();
    let deviceValidation = this.globalObjects.getLocallData("device_validation");
    let token = this.globalObjects.getLocallData("device_token");
    let appKey = this.globalObjects.getLocallData("appKey");
    let entityCodeStr = this.globalObjects.getLocallData("entityCodeStr");
    var appDataArr: any = this.globalObjects.getLocallData("appData");
    let userDetails = this.globalObjects.getLocallData("userDetails");
    var loginFlag: any;

    if (appDataArr) {
      for (let app of appDataArr) {
        if (app.appkey.toUpperCase() == appKey.toUpperCase()) {
          loginFlag = app.loginFlag;
        }
      }
    }
    if (loginFlag) {
      loginFlag = loginFlag;
    }
    else {
      loginFlag = "";
    }
    entityCodeStr = entityCodeStr ? entityCodeStr : "";

    let url = 'login?userId=' + (this.loginCredentials.user_code).trim() + '&password=' + encodeURIComponent(this.loginCredentials.password) +
      '&deviceId=' + encodeURIComponent(this.globalObjects.device.uuid) + '&deviceName=' + encodeURIComponent(this.globalObjects.device.model)
      + '&notificationToken=' + encodeURIComponent(token) + "&appKey=" + appKey + "&appkeyValidationFlag=" + deviceValidation + "&OTPFlag=" + loginFlag
      + "&entityCodeStr=" + encodeURIComponent(entityCodeStr) + "&appCode="+ encodeURIComponent(this.globalObjects.getLocallData('appCode'));
    console.log("url in login....", url)
    if (this.online) {
      this.dataService.getData(url).then(data => {
        console.log("from login ....", data)
        this.loginValid = data;
        let otpCodeLoc;
        if (this.OTPCode) {
          otpCodeLoc = this.OTPCode;
        }
        else {
          otpCodeLoc = "";
        }
        console.log(JSON.stringify(data));

        console.log("data....>>>>", data)
        if (this.loginValid.responseMsg === "User is authenticated") {

          if (loginFlag == 'Y') {
            this.validateOTP("");

          } else if (loginFlag == 'M') {
            this.validateMobile();
          } else {
            this.login();
          }

        }

        // ------------------------------//
        else {
          this.flagForDisableLoginButton = 0;
          //this.globalObjects.displayCordovaToast(this.loginValid.responseMsg);
          alert(this.loginValid.responseMsg);
        }

        this.isProcessing = false;
      }, err => {
        console.log(err);

        this.isProcessing = false;
        this.globalObjects.displayCordovaToast("");
      })
    } else {
      this.isProcessing = false;
      this.globalObjects.displayCordovaToast("Please Check Internet Connectivity..");
    }
  }



  changeSetting() {
    this.router.navigate(['ChangeServerSettingPage']);
  }
  // ionViewDidLoad() {
  //   this.menuCtrl.swipeEnable(false);

  //   this.events.subscribe('url:created', (url) => {
  //     s_url = url;
  //   });
  // }

  updateApp() {
    alert('Updating App');
  }

  inputType = 'password';
  iconName = 'eye-off';

  hideShowPassword() {
    this.inputType = this.inputType === 'text' ? 'password' : 'text';
    this.iconName = this.iconName === 'eye-off' ? 'eye' : 'eye-off';
  }
  forgotPassword() {
    this.navCtrl.navigateRoot('forgot-password');
  }

  async validateOTP(otpCode) {
    let alert = await this.alertCtrl.create({
      header: 'OTP Verification',
      message: 'We have sent you an OTP(one time password), please check and enter OTP)',
      inputs: [
        {
          name: 'user_otp',
          placeholder: 'Enter OTP ',
          value: otpCode
        }
      ],
      buttons: [
        // {
        //   text: 'Cancel',
        //   role: 'cancel',
        //   handler: data => {
        //     console.log('Cancel clicked');
        //   }
        // },
        {
          text: 'Resend OTP',
          handler: data => {
            this.doLogin();
            // return false;
          }
        },
        {
          text: 'OK',
          handler: data => {
            console.log("dataotp....", data);
            if (data.user_otp == this.loginValid.responseData.otp.otp
            ) {
              this.login();
            } else {
              this.globalObjects.displayCordovaToast("Please enter valid OTP");
              return false;
            }
          }
        },

      ]
    });
    await alert.present();

    // alert.onDidDismiss(data => {
    //   this.flagForDisableLoginButton = 0;
    // })
  }
  async validateMobile() {
    //alert('Mobile');
    let alert = await this.alertCtrl.create({
      header: 'Mobile No Verification',
      message: 'Enter your mobile no for verification',
      inputs: [
        {
          name: 'user_no',
          placeholder: 'Enter Mobile No'
        }
      ],
      buttons: [
        {
          text: 'OK',
          handler: data => {
            // console.log('dataMob' + data.user_no);

            if (this.loginValid.mobileNo != null && this.loginValid.mobileNo.indexOf(",")) {
              var mobarr = [];
              let countMob: number = 0;
              mobarr = this.loginValid.mobileNo.split(",");
              for (var i = 0; i < mobarr.length; i++) {
                if (mobarr[i] == data.user_no) {
                  countMob = 0;
                  this.login();
                  break;
                } else {
                  countMob++;
                }
                // else{
                //   this.globalObjects.displayCordovaToast("Please enter valid Number");   
                // }
              }
              if (countMob > 0) {
                this.globalObjects.displayCordovaToast("Please enter valid Number");
              }

            } else {
              if (this.loginValid.mobileNo == data.user_no) {
                this.login();
              } else {
                this.globalObjects.displayCordovaToast("Please enter valid Number");
                return false;
              }
            }
          }
        },
      ]
    });
    await alert.present();

    //  let results=await alert.onDidDismiss(data => {
    //   this.flagForDisableLoginButton = 0;
    // })

  }



  login() {
    if (this.loginValid.responseStatus === "success") {
      this.globalObjects.setDataLocally('licExp', 1);
      // let div_code = "";
      if (this.loginValid.responseData.division) {
        if (this.loginValid.responseData.division.indexOf(" ") > -1) {
          this.loginValid.responseData.div_code = this.loginValid.responseData.division.split(" ")[0];
        }
        else if (this.loginValid.responseData.division.indexOf(",") > -1) {
          this.loginValid.responseData.div_code = this.loginValid.responseData.division.split(",")[0];
        }
        else if (this.loginValid.responseData.division.indexOf("#") > -1) {
          this.loginValid.responseData.div_code = this.loginValid.responseData.division.split("#")[0];
        } else {
          this.loginValid.responseData.div_code = this.loginValid.responseData.division;
        }
      }
      this.loginValid.responseData.password = this.loginCredentials.password

      if (this.loginValid.responseData.entity_code) {
        if (this.loginValid.responseData.entity_code.indexOf("#") > -1) {
          this.loginValid.responseData.entity_code = this.loginValid.responseData.entity_code.split("#")[0];
        } else if (this.loginValid.responseData.entity_code.indexOf(",") > -1) {
          this.loginValid.responseData.entity_code = this.loginValid.responseData.entity_code.split(",")[0];
        } else if (this.loginValid.responseData.entity_code.indexOf(" ") > -1) {
          this.loginValid.responseData.entity_code = this.loginValid.responseData.entity_code.split(" ")[0];
        }
      }

      this.globalObjects.setDataLocally("userDetails", this.loginValid.responseData);

      // this.events.publish("entity_name", this.loginValid.responseData.entity_name);
      // this.events.publish("entity_code_str", this.loginValid.responseData.entity_code_str);

      var appArr: any = this.globalObjects.getLocallData("appData");
      // if (appArr) {
      //   let isExsist = false;
      //   for (let app of appArr) {
      //     if (app.appkey.toUpperCase() == appKey.toUpperCase()) {
      //       app.userDetails = this.loginValid.responseData;
      //       isExsist = true;
      //     }
      //   }
      //   this.globalObjects.setDataLocally("appData", appArr);
      // }
      this.globalObjects.setDataLocally("apptype", this.loginValid.responseData.module);
      // this.globalObjects.setScopeUrl(s_url);
      // this.router.navigate(['super']);

        this.events.publish("GET_SIDE_MENU_DATA","LHS");

      this.navCtrl.navigateRoot('super');
    }
  }

  start() {
    return new Promise((resolve, reject) => {
      SMSReceive.startWatch(
        () => {
          document.addEventListener('onSMSArrive', (e: any) => {
            var IncomingSMS = e.data;
            // this.processSMS(IncomingSMS);
            const message = IncomingSMS.body;
            // alert(message);
            if (message && message.indexOf('LHSapp') != -1) {
              this.OTPCode = IncomingSMS.body.slice(0, 6);
              resolve(this.OTPCode)
              // this.stop();
            }
          });
        },
        () => { console.log('watch start failed') }
      )
    })
  }

  stop() {
    SMSReceive.stopWatch(
      () => { console.log('watch stopped') },
      () => { console.log('watch stop failed') }
    )
  }

  processSMS(data) {
    // Check SMS for a specific string sequence to identify it is you SMS
    // Design your SMS in a way so you can identify the OTP quickly i.e. first 6 letters
    // In this case, I am keeping the first 6 letters as OTP
    const message = data.body;

    if (message && message.indexOf('LHSapp') != -1) {
      this.OTPCode = data.body.slice(0, 6);
      this.stop();
    }
  }



  googleLogin() {
    if (this.platform.is('cordova')) {
      this.nativeGoogleLogin();
    } else {
      this.googleWebLogin();
    }
  }

  async nativeGoogleLogin(): Promise<void> {
    try {
      // const gplusUser = await this.googlePlus.login({
      //   'webClientId': '259409264840-54uh05q3j3b6ch94kjojr3og7h14i7cr.apps.googleusercontent.com',
      //   'offline': true,
      //   'scopes': 'profile email'
      // })
      // console.log("this.userprofile..>>>",this.userprofile);

      // this.userprofile = await this.afAuth.auth.
      //   signInWithCredential(firebase.auth.GoogleAuthProvider
      //     .credential(gplusUser.idToken))


      if (this.userprofile) {
        console.log(JSON.stringify(this.userprofile));
        this.router.navigate(["/super"]);
      } else {
        this.router.navigate(["/login"]);
      }
    } catch (err) {
      console.log(err)
    }
  }


  async googleWebLogin(): Promise<void> {

    // try {
    //   const provider = new firebase.auth.GoogleAuthProvider();
    //   const credential = await this.afAuth.auth.signInWithPopup(provider);
    //   if (credential) {
    //     console.log(JSON.stringify(credential));
    //     this.router.navigate(["/super"]);
    //   }
    // } catch (err) {
    //   console.log(err)
    // }

  }

}



    // var div_code = "";
    // if (this.loginValid.division) {
    //   if (this.loginValid.division.indexOf(" ") > -1) {
    //     div_code = this.loginValid.division.split(" ")[0];
    //   } else {
    //     div_code = this.loginValid.division;
    //   }
    // }
    // if (this.loginValid.bill_entry_catg_preference) {
    //   this.globalObjects.setDataLocally("app-theme", this.loginValid.bill_entry_catg_preference);
    // } else {
    //   this.globalObjects.setDataLocally("app-theme", "theme-default");
    // }

    // if (!this.loginValid.acc_year) {
    //   let currentDate = new Date();
    //   let getMonth = currentDate.getMonth() + 1;
    //   let getYear = currentDate.getFullYear().toString().substr(2, 2);
    //   let acc_year;
    //   let fst, scnd;
    //   if (getMonth == 1 || getMonth == 2 || getMonth == 3) {
    //     fst = (parseInt(getYear) - 1);
    //     scnd = (parseInt(getYear));
    //     acc_year = fst + "-" + scnd;
    //   } else {
    //     fst = (parseInt(getYear));
    //     scnd = (parseInt(getYear) + 1);
    //     acc_year = fst + "-" + scnd;
    //   }
    //   this.loginValid.acc_year = acc_year;
    // }
    // this.loginValid.div_code = div_code;

    // this.loginValid.password = this.loginCredentials.password;

    // if (this.loginValid.entity_code) {
    //   var dataSplit;
    //   if (this.loginValid.entity_code.indexOf("#") > -1) {
    //     dataSplit = this.loginValid.entity_code.split("#");
    //     this.loginValid.entity_code = dataSplit[0];
    //   } else if (this.loginValid.entity_code.indexOf(",") > -1) {
    //     dataSplit = this.loginValid.entity_code.split(",");
    //     this.loginValid.entity_code = dataSplit[0];
    //   } else if (this.loginValid.entity_code.indexOf(" ") > -1) {
    //     dataSplit = this.loginValid.entity_code.split(" ");
    //     this.loginValid.entity_code = dataSplit[0];
    //   }
    // }

    // this.loginValid.loginId = this.loginCredentials.user_code.toUpperCase();
    // this.globalObjects.setDataLocally("userDetails", this.loginValid);
    // this.globalObjects.setDataLocally("apptype", this.loginValid.module);
    // this.globalObjects.setScopeUrl(s_url);


    // this.navCtrl.navigateRoot('HomePage');