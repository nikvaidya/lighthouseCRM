import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { GlobalObjectsService } from 'src/app/services/global-objects.service';
import { Router } from '@angular/router';
import { MenuController, NavController } from '@ionic/angular';
import { CacheService } from "ionic-cache";
import { Device } from '@ionic-native/device/ngx';

@Component({
  selector: 'app-appkey-validation',
  templateUrl: './appkey-validation.page.html',
  styleUrls: ['./appkey-validation.page.scss'],
})
export class AppkeyValidationPage implements OnInit {
  // device: any = {};
  appkey: any;
  constructor(public globalObjects: GlobalObjectsService, private router: Router, public menuCtrl: MenuController, private navCtrl: NavController, public httpClient: HttpClient,
    cache: CacheService, private device: Device) {
    cache.setDefaultTTL(60 * 60 * 60); //set default cache TTL for 1 day
    // private device: Device,

    //----------------------start------------------

    if (this.globalObjects.getLocallData("userDetails")) {
      this.navCtrl.navigateRoot('super');
    } else {
      if (!this.globalObjects.getLocallData("isAppLaunch")) {
        // this.router.navigate(['appkey-validation']);
        this.menuCtrl.enable(false);
      }
      // else {
      //   // this.router.navigate(['login']);
      //   this.navCtrl.navigateRoot('login');
      // }
    }
    //----------------------end--------------------
  }

  ngOnInit() {
    this.globalObjects.geoLocation();

  }
  ngOnDestroy() {
    this.menuCtrl.enable(true);
  }


  save(appkey) {
    // var url = "http://192.168.100.195:8080/DynamicAppWS/webService/getServerDetails?appKey=" + appkey +
    // var url = "http://203.193.167.118:8888/DynamicAppWSV3/webService/getServerDetails?appKey=" + appkey +
    //   "&device_id=" + this.device.uuid + "&device_name=" + this.device.model;
    console.log(appkey);

    let appkeyTryCount = this.globalObjects.getLocallData("appkeyTryCount");
    this.globalObjects.setDataLocally("appkeyTryCount", appkeyTryCount + 1);
    let lockTime = this.globalObjects.getLocallData("appkeyLockTime");
    let expiryTime: any;
    if (lockTime != null && lockTime != "") {
      let lockTime1: any = new Date(lockTime);
      let now: any = new Date();
      expiryTime = Math.abs((lockTime1.getTime() - now.getTime()) / 60000);
    }

    if (appkeyTryCount < 3) {
      if (appkeyTryCount == 2) {
        this.globalObjects.setDataLocally("appkeyLockTime", new Date());
      }
      this.precessRequest(appkey);
    } else if (expiryTime > 10) {
      this.globalObjects.destroyLocalData("appkeyTryCount");
      this.globalObjects.destroyLocalData("appkeyLockTime");
      this.precessRequest(appkey);
    } else {
      this.globalObjects.presentToastWithOptions(`You have exceeded unsuccessful attempt. Please try after ${Math.round(10 - expiryTime)} minutes.`, "errorClass");
    }

    // postData(url, data) {
    //   return new Promise((resolve, reject) => {
    //     var l_url = this.globalObjects.getScopeUrl() + url;
    //     this.http.post(l_url, data)
    //       .subscribe(data => {
    //         resolve(data);
    //       }, err => {
    //         reject(err);
    //       })
    //   })
    // }


  }


  precessRequest(appkey) {

    let base_url = "http://203.193.167.118:8888/lhsws/getServerDetails";
    // let base_url = "http://192.168.100.157:8888/lhsws/getServerDetails";
    console.log(base_url);
    // if (this.globalObjects.getOnlineStatus) {

    var data = {
      "parameters": {
        "appKey": appkey,
        "device_id": this.device.uuid,
        "device_name": this.device.model
      }
    }
    // this.globalObjects.showLoading();

    this.httpClient.post(encodeURI(base_url), data).subscribe(data => {
      console.log("data in AppKeyValidate..", data)

      var resData: any = data;
      var responseData = resData.responseData;

      // this.globalObjects.hideLoading();
      if (resData.responseStatus == "success") {
        // alert(resData.dbName);

        //=----------------------------------------------
        var appData: any = {};
        appData.app_name = resData.responseData.app_name;
        appData.appkey = appkey.toUpperCase();
        appData.loginFlag = resData.responseData.loginFlag;

        // alert(appkey.toUpperCase());
        appData.resData = resData.responseData;
        var appArr: any = this.globalObjects.getLocallData("appData");
        if (appArr) {
          let isExsist = false;
          for (let app of appArr) {
            if (app.appkey.toUpperCase() == appkey.toUpperCase()) {
              app = JSON.parse(JSON.stringify(appData));
              isExsist = true;
            }
          }
          if (!isExsist) {
            appArr.push(appData);
          }
          this.globalObjects.setDataLocally("appData", appArr);
        } else {
          appArr = [];
          appArr.push(appData);
          this.globalObjects.setDataLocally("appData", appArr);
        }
        //=----------------------------------------------
        this.globalObjects.setDataLocally("appKey", appkey);
        this.globalObjects.setDataLocally("appCode",responseData.appcode);
        var server_url = "http://" + responseData.serverUrl + "/" + responseData.war_name + "/" + responseData.entity + "/" + responseData.dbUrl + "/" + responseData.portNo + "/" + responseData.dbName + "/" + responseData.dbPassword + "/" + responseData.dbSid + "/";
        var server_url2 = "http://" + responseData.server_url2 + "/" + responseData.war_name + "/" + responseData.entity + "/" + responseData.dbUrl + "/" + responseData.portNo + "/" + responseData.dbName + "/" + responseData.dbPassword + "/" + responseData.dbSid + "/";
        var server_url3 = "http://" + responseData.server_url3 + "/" + responseData.war_name + "/" + responseData.entity + "/" + responseData.dbUrl + "/" + responseData.portNo + "/" + responseData.dbName + "/" + responseData.dbPassword + "/" + responseData.dbSid + "/";
        var server_url4 = "http://" + responseData.server_url4 + "/" + responseData.war_name + "/" + responseData.entity + "/" + responseData.dbUrl + "/" + responseData.portNo + "/" + responseData.dbName + "/" + responseData.dbPassword + "/" + responseData.dbSid + "/";
        this.globalObjects.setDataLocally("isAppLaunch", true);
        this.globalObjects.setDataLocally("scopeUrl", server_url);
        this.globalObjects.setDataLocally("server_url1", server_url);
        this.globalObjects.setDataLocally("server_url2", server_url2);
        this.globalObjects.setDataLocally("server_url3", server_url3);
        this.globalObjects.setDataLocally("server_url4", server_url4);
        this.globalObjects.setDataLocally("dbName",responseData.dbName);
        this.globalObjects.setScopeUrl(server_url);
        this.globalObjects.setDataLocally("entityCodeStr", responseData.entity_code_str);
        // this.globalObjects.setDataLocally("loginFlag", resData.loginFlag);
        // this.globalObjects.showLoading();

        this.globalObjects.checkAndSetScopeUrl().then(data => {
          // this.globalObjects.hideLoading();
          let ec = responseData.entity_code_str.split('#');
          this.globalObjects.setDataLocally("entityCode", ec[0]);
          // this.navCtrl.setRoot('LoginPage');
          // this.navCtrl.setRoot('AppCollectionPage');
          this.router.navigate(['appkey-collection']);

          this.globalObjects.destroyLocalData("appkeyTryCount");
          this.globalObjects.destroyLocalData("appkeyLockTime");
        }, err => { this.globalObjects.hideLoading(); })

      } else {
        // this.globalObjects.hideLoading();
        // this.globalObjects.displayCordovaToast(resData.responseMsg);
        this.globalObjects.presentToastWithOptions(resData.responseMsg, "errorClass");
      }
      this.globalObjects.setDataLocally("device_validation", responseData.device_validation);
    }, err => {

      this.globalObjects.hideLoading();
      this.globalObjects.displayCordovaToast("3 Something went wrong please try again later!" + JSON.stringify(err));
    })
    // } else {
    //   this.globalObjects.displayCordovaToast('Network not available...')
    // }
  }
}
